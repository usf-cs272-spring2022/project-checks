name: "Check project issue"

on:
  workflow_call:

env:
  # project tests and first code review deadlines
  PROJECT_1_TESTS:  "2022-03-01"
  PROJECT_1_REVIEW: "2022-03-08"
  PROJECT_2_TESTS:  "2022-03-29"
  PROJECT_2_REVIEW: "2022-04-05"
  PROJECT_3_TESTS:  "2022-04-19"
  PROJECT_3_REVIEW: "2022-04-26"
  PROJECT_4_TESTS:  "2022-05-10"

  LATE_TESTS_POINTS:  "2" # number of points per deduction (tests)
  LATE_TESTS_DAYS:    "1" # number of days late per deduction (tests)

  LATE_REVIEW_POINTS: "5" # number of points per deduction (first code review)
  LATE_REVIEW_DAYS:   "3" # number of days late per deduction (first code review)

  LATE_MAX_GAP:      "10" # maximum gap in between code reviews
  LATE_MAX_POINTS:   "26" # maximum number of points to deduct

  # default messages
  RUN_DETAIL: "@{{ github.actor }} see [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
  FIX_ERRORS: "After fixing the errors, please remove the `error` label and re-open this issue."

jobs:
  check_issue:
    name: "Issue"
    runs-on: ubuntu-latest

    outputs:
      label:   ${{ steps.check_labels.outputs.label }}
      name:    ${{ steps.check_body.outputs.name }}
      user:    ${{ steps.check_body.outputs.user }}
      release: ${{ steps.check_title.outputs.title }}

    steps:
      - name: "Output context"
        uses: actions/github-script@v6
        with:
          script: console.log(context);

      - name: "Check issue labels"
        id: check_labels
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.issue.labels.map(e => e.name);
            console.log(`Labels: ${labels}`);

            if (labels.length == 1) {
              const label = labels[0];

              switch (label) {
                case 'review-request':
                case 'grade-tests':
                case 'grade-review':
                case 'grade-release':
                  core.setOutput('label', label);
                  return;
              }
            }

            // only errors will get this far
            core.setOutput('error_message', `:no_entry: Unable to determine request type from issue #${ context.payload.issue.number } labels: ${labels.length === 0 ? '*(none)*' : labels.join(', ')}\n\nMake sure to use the provided issue templates. ${ process.env.FIX_ERRORS }\n\n:octocat: ${ process.env.RUN_DETAIL }`);
            core.setFailed(`Unable to determine request type from issue #${ context.payload.issue.number } labels: ${labels.length === 0 ? '(none)' : labels.join(', ')}`);

      - name: "Check issue body"
        id: check_body
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            const body = context.payload.issue.body;
            let error_message = undefined;

            try {
              const pattern = /```json([^`]+)```/;
              const matched = body.match(pattern);

              const parsed = JSON.parse(matched[1]);
              console.log(`Parsed: ${JSON.stringify(parsed)}`);

              if(!parsed.hasOwnProperty('name') || !parsed.hasOwnProperty('username')) {
                error_message = `Both the "name" and "username" properties are required in the issue #${ context.payload.issue.number } body.`;
              }
              else if (parsed.name === "FULL_NAME" || parsed.username === "USF_USERNAME") {
                error_message = `The "name" and "username" properties in the issue #${ context.payload.issue.number } body must be updated.`;
              }
              else {
                core.setOutput('name', parsed.name);
                core.setOutput('user', parsed.username);
                return;
              }
            }
            catch (error) {
              error_message = `Unable to parse issue #${ context.payload.issue.number } body as JSON. Error: ${error.message}`;
            }

            // only errors will get this far
            core.setOutput('error_message', `:no_entry: ${error_message}\n\nMake sure to use the provided issue templates. ${ process.env.FIX_ERRORS }\n\n:octocat: ${ process.env.RUN_DETAIL }`);
            core.setFailed(error_message);

      - name: "Check issue title"
        id: check_title
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.issue.title;
            console.log(`Issue Title: ${title}`);

            const pattern = /^Request.+\b(v[1-4]\.\d+\.\d+)$/;
            const matched = title.match(pattern);

            if (matched !== null && matched.length === 2) {
              const release = matched[1];
              core.setOutput('release', release);
              console.log(`Release: ${release}`);
            }
            else {
              core.setOutput('error_message', `:no_entry: Unable to parse release from issue #${ context.payload.issue.number } title:\n\n> ${title}\n\nMake sure to replace \`v0.0.0\` in the issue title with a properly-formated release number. ${ process.env.FIX_ERRORS }\n\n:octocat: ${ process.env.RUN_DETAIL }`);
              core.setFailed(`Unable to parse release from issue #${ context.payload.issue.number } title: ${title}`);
            }

      - name: "Check failures"
        id: check_failures
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            const steps = ${{ toJSON(steps) }};

            for (const step in steps) {
              if (steps[step].outcome == "failure" && steps[step].outputs.hasOwnProperty('error_message')) {
                // output the error as an issue comment
                github.rest.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body: steps[step].outputs.error_message});
              }
            }

            // close the issue, assign it to the user, and apply the 'error' label
            const labels = context.payload.issue.labels.map(e => e.name);
            labels.push('error');

            github.rest.issues.update({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, state: 'closed', assignees: [context.actor], labels: labels});

  check_actions:
    name: "Actions"
    runs-on: ubuntu-latest
    needs: [check_issue]
    if: ${{ needs.check_issue.outputs.label == 'grade-release' || needs.check_issue.outputs.label == 'grade-tests' || needs.check_issue.outputs.label == 'review-request' }}
    steps:
      - name: "Check release"
        uses: actions/github-script@v6
        env:
          RELEASE: ${{ needs.check_issue.outputs.release }}
          LABEL: ${{ needs.check_issue.outputs.label }}
        with:
          script: |
            const release = process.env.RELEASE;
            const label = process.env.LABEL;

            console.log(`Label: ${label}, Release: ${release}`);

            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'project-release.yml'
            });

            if (runs.status != 200) {

            }

            console.log(runs);

  check_reviews:
    name: "Reviews"
    runs-on: ubuntu-latest
    if: ${{ needs.check_issue.outputs.label == 'grade-release' || needs.check_issue.outputs.label == 'review-request' }}
    needs: [check_issue]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_grade:
    name: "Grade"
    runs-on: ubuntu-latest
    if: ${{ !failure() && (needs.check_issue.outputs.label == 'grade-release' || needs.check_issue.outputs.label == 'grade-tests' || needs.check_issue.outputs.label == 'grade-review') }}
    needs: [check_issue, check_actions, check_reviews]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_branch:
    name: "Branch"
    if: ${{ !failure() && needs.check_issue.outputs.label == 'request-review' }}
    needs: [check_issue, check_actions, check_reviews]
    runs-on: ubuntu-latest
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_status:
    name: "Status"
    if: ${{ always() }}
    needs: [check_actions, check_reviews, make_grade, make_branch]
    runs-on: ubuntu-latest
    steps:
      - name: "Check status"
        uses: actions/github-script@v6
        with:
          script: |
            const needs = ${{ toJSON(needs) }}
            console.log(needs);
