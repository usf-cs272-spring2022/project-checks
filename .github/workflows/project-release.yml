name: "Check project release"

on:
  workflow_call:
    outputs:
      project_num:
        description: "The project number (e.g. 1, 2, 3a, 3b, or 4)."
        value: ${{ jobs.check_release.outputs.project_num }}

      reviews_num:
        description: "The number of code reviews (e.g. 2 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.reviews_num }}

      version_num:
        description: "The minor version number (e.g. 3 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.reviews_num }}

      release_tag:
        description: "The project version (e.g. v1.0.0)."
        value: ${{ jobs.check_release.outputs.release_tag }}
        
jobs:
  check_release:
    name: "Release Number"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.parse_release.outputs.release_tag }}
      project_num: ${{ steps.parse_release.outputs.project_num }}
      reviews_num: ${{ steps.parse_release.outputs.reviews_num }}
      version_num: ${{ steps.parse_release.outputs.version_num }}
      
    steps:
      - name: "Check workflow trigger"
        id: check_trigger
        run: |
          echo ""
          echo "Event: ${{ github.event_name }}"
          echo " Type: ${{ github.ref_type }}"
          echo ""

          if [[ "${{ github.event_name }}" != "release" || "${{ github.ref_type }}" != "tag" ]]; then
            echo "::error ::Unexpected workflow trigger. This workflow only works on release tags."
            exit 1
          fi
          
      - name: "Parse release version"
        id: parse_release
        run: |
          echo ""
          RELEASE_REF="${{ github.ref }}"
          RELEASE_TAG="${{ github.ref_name }}"
          echo "Ref: ${RELEASE_REF}"
          echo "Tag: ${RELEASE_TAG}"
          echo ""
          
          if [[ ${RELEASE_TAG} =~ ^v([1-4])\.([0-9]+)\.([0-9]+)$ ]]; then
            PROJECT_NUM=${BASH_REMATCH[1]}
            REVIEWS_NUM=${BASH_REMATCH[2]}
            VERSION_NUM=${BASH_REMATCH[3]}
            
            if [[ ${PROJECT_NUM} -eq 3 ]]; then
              if [[ ${REVIEWS_NUM} -eq 0 ]]; then
                PROJECT_NUM="3a"
              else
                PROJECT_NUM="3b"
              fi
            fi
            
            echo "::set-output name=release_tag::${RELEASE_TAG}"
            echo "::set-output name=project_num::${PROJECT_NUM}"
            echo "::set-output name=reviews_num::${REVIEWS_NUM}"
            echo "::set-output name=version_num::${VERSION_NUM}"
            
            echo "Project: ${PROJECT_NUM}"
            echo "Reviews: ${REVIEWS_NUM}"
            echo "Version: ${VERSION_NUM}"
          else
            echo "::error ::Unable to parse project information from tag. Check the tag uses the v#.#.# format in lowercase."
            exit 1
          fi
          
          echo ""

  check_compile:
    name: "Code Compiles"
    runs-on: ubuntu-latest
    needs: check_release
    steps:
      - name: "Hello world"
        run: |
          echo "Hello world"
          echo "actor: ${{ github.actor }}"
          echo "ref: ${{ github.ref }}"
          echo "ref_type: ${{ github.ref_type }}"
          echo "repository: ${{ github.repository }}"
          echo "event: ${{ toJson(github.event) }}"
  
  check_source_warnings:
    name: "Code Warnings"
    runs-on: ubuntu-latest
    needs: check_compile
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_javadoc_warnings:
    name: "Javadoc Warnings"
    runs-on: ubuntu-latest
    needs: check_compile
    steps:
      - name: "Hello world"
        run: |
          echo "Hello world"
          exit 1

  check_tests:
    name: "JUnit Tests"
    runs-on: ubuntu-latest
    needs: check_compile
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_code_style:
    name: "Code Style"
    runs-on: ubuntu-latest
    needs: check_compile
    steps:
      - name: "Hello world"
        run: echo "Hello world"
