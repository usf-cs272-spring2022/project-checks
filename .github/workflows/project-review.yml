name: 'Check project review'

on:
  workflow_call:

env:
  RUN_DETAIL: "\n\n:octocat: @${{ github.actor }} see [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."

jobs:
  check_request:
    name: 'Check Request'
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.review.state == 'approved' && github.event.review.user.login == 'sjengle' }}

    steps:
      - name: 'Startup'
        uses: 'actions/github-script@v6'
        with:
          script: |
            console.log(context);

            github.rest.issues.createComment({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              issue_number: context.payload.pull_request.number,
              body: `:robot: The GitHub Actions bot is now processing this pull request...${ process.env.RUN_DETAIL}`
            });

  update_labels:
    name: 'Update Labels'
    runs-on: 'ubuntu-latest'
    needs: ['check_request']

    steps:
      - name: 'Setup'
        uses: 'actions/github-script@v6'
        with:
          script: |
            // set default value in case there is something weird
            const label = 'error';
            core.exportVariable('label', label);
            console.log('label:', label);

      - name: 'Code'
        uses: 'actions/github-script@v6'
        if: ${{ contains(github.event.review.body, 'Resubmit for Code Review') }}
        with:
          script: |
            const label = 'review-resubmit';
            core.exportVariable('label', label);
            console.log('label:', label);

      - name: 'Quick'
        uses: 'actions/github-script@v6'
        if: ${{ contains(github.event.review.body, 'Resubmit for Quick Review') }}
        with:
          script: |
            const label = 'review-resubmit-quick';
            core.exportVariable('label', label);
            console.log('label:', label);

      - name: 'Pass'
        uses: 'actions/github-script@v6'
        if: ${{ contains(github.event.review.body, 'Pass') }}
        with:
          script: |
            const label = 'review-passed';
            core.exportVariable('label', label);
            console.log('label:', label);

      - name: 'Update'
        uses: 'actions/github-script@v6'
        if: ${{ !failure() }}
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              issue_number: context.payload.pull_request.number,
              labels: [process.env.label]
            });

  update_request:
    name: 'Update Request'
    runs-on: 'ubuntu-latest'
    needs: ['check_request']

    steps:
      - name: 'Parse'
        id: 'parse-json'
        uses: 'actions/github-script@v6'
        with:
          script: |
            try {
              const pattern = /```json([^`]+)```/;
              const matched = context.payload.pull_request.body.match(pattern);

              const parsed = JSON.parse(matched[1]);
              console.log(`Parsed: ${JSON.stringify(parsed)}`);

              if(!parsed.hasOwnProperty('project') || !parsed.hasOwnProperty('reviews')) {
                error_message = `The JSON data has an unexpected format. Please consult with the instructor on Piazza.`;
              }
              else {
                // everything looks good!
                core.exportVariable('message', 'Unexpected error.');
                core.exportVariable('todo', '  - [ ] Reach out to the instructor on Piazza.');
                return parsed;
              }
            }
            catch (error) {
              error_message = `Unable to parse pull request body as JSON. Error: ${error.message}`;
            }

            // only errors make it this far
            core.setFailed(error_message);

            github.rest.issues.createComment({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              issue_number: context.payload.pull_request.number,
              body: `:robot: ${ error_message } ${ process.env.RUN_DETAIL}`
            });

      - name: 'Resubmit'
        uses: 'actions/github-script@v6'
        if: ${{ contains(github.event.review.body, 'Resubmit') }}
        with:
          script: |
            const data = ${{ toJson( steps.parse_json.outputs.result )}};

            const message = `:robot: Hi @${ github.actor }, your code review for project ${ data.project } has been processed.`;
            console.log(message);

            let todo = `
              - [ ] On GitHub, click the "Merge" button to merge this pull request #${ context.payload.pull_request.number } into the `main` branch.

              - [ ] In your Eclipse workspace, use the "Team" » "Pull" option to pull in the changes made to your `main` branch.

              - [ ] Fix the \`TODO\` comments in the code, then commit and push those changes to GitHub. Reach out on Piazza or office hours if any of the comments are unclear.

              - [ ] Create a new \`v${ data.project }.${ data.reviews + 1 }.x\` release and make sure it passes all of the checks.

            Once the above is complete, use the "Request Code Review Appointment" issue template to request your next code review appointment. Your next appointment should be between `5` to `10` days from today to avoid penalties.
            `;

            // TODO Request grade
            // TODO Normal vs quick review

            core.exportVariable('message', message);
            core.exportVariable('todo', todo);

      - name: 'Pass'
        uses: 'actions/github-script@v6'
        if: ${{ contains(github.event.review.body, 'Pass') }}
        with:
          script: |
            const data = ${{ toJson( steps.parse_json.outputs.result )}};

            const message = `:tada: Congratulations @${ github.actor }, you **passed** code review for project ${ data.project }---nice work!`;
            console.log(message);

            const todo = `
              - [ ] On GitHub, click the "Merge" button to merge this pull request #${ context.payload.pull_request.number } into the `main` branch.

              - [ ] In your Eclipse workspace, use the "Team" » "Pull" option to pull in the changes made to your `main` branch.

              - [ ] Fix any remaining \`TODO\` comments in the code, then commit and push those changes to GitHub.

              - [ ] Create a final \`v${ data.project }.${ data.reviews + 1 }.x\` release and make sure it passes all of the checks.

              - [ ] Use the "Request Project Final Release Grade" issue template to request your grade.

            Once the above is complete, you are ready to begin or merge the functionality for project ${ data.project + 1} into the `main` branch!
            `;

            core.exportVariable('message', message);
            core.exportVariable('todo', todo);

      - name: 'Update'
        uses: 'actions/github-script@v6'
        if: ${{ !failure() }}
        with:
          script: |
            const body = `${ process.env.message } Your next steps are:

            ${ process.env.todo }

            ${ process.env.RUN_DETAIL}
            `;

            console.log(body);

            github.rest.issues.createComment({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              issue_number: context.payload.pull_request.number,
              body: body
            });

# TODO Check review
# When a pull request review is submitted, check the status. If the status was
# approved by the instructor, then indicate the request is being processed.
# Otherwise, do nothing.
#
# To process the request, check the review comment. There are three possible
# results:
#
# 1. Resubmit for another normal review -or- quick review. Apply the appropriate
#    labels and respond with instructions for how to request the next appointment.
#    Include what range of dates the next appointment should occur.
#
# 2. Conditional pass or pass. Apply the appropriate labels and respond with
#    instructions for how to prepare the final release. Include when the final
#    release should be created by to avoid late penalties.
#
# 3. Other. This could be associated with a cancelled review for some reason. No
#    labels should be applied.
