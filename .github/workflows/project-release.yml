name: "Check project release"

on:
  workflow_call:
    outputs:
      project_num:
        description: "The project number (e.g. 1, 2, 3, or 4)."
        value: ${{ jobs.check_release.outputs.project_num }}

      project_ver:
        description: "The project version (e.g. 1, 2, 3a, 3b, or 4)."
        value: ${{ jobs.check_release.outputs.project_ver }}

      reviews_num:
        description: "The number of code reviews (e.g. 2 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.reviews_num }}

      version_num:
        description: "The minor version number (e.g. 3 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.version_num }}

      release_tag:
        description: "The project version (e.g. v1.0.0)."
        value: ${{ jobs.check_release.outputs.release_tag }}

env:
  USER_PATH: project-main
  TEST_PATH: project-tests
  RUN_DETAIL: "See [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."

jobs:
  check_release:
    name: "Release Number"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.parse_release.outputs.release_tag }}
      project_ver: ${{ steps.parse_release.outputs.project_ver }}
      project_num: ${{ steps.parse_release.outputs.project_num }}
      reviews_num: ${{ steps.parse_release.outputs.reviews_num }}
      version_num: ${{ steps.parse_release.outputs.version_num }}
      user_cache: ${{ steps.generate_keys.outputs.user_cache }}
      test_cache: ${{ steps.generate_keys.outputs.test_cache }}

    steps:
      - name: "Check workflow trigger"
        id: check_trigger
        run: |
          echo "Event: ${{ github.event_name }}"
          echo " Type: ${{ github.ref_type }}"

          if [[ "${{ github.event_name }}" != "release" || "${{ github.ref_type }}" != "tag" ]]; then
            echo "::error ::Unexpected workflow trigger. This workflow only works on release tags."
            exit 1
          fi

      - name: "Parse release version"
        id: parse_release
        run: |
          RELEASE_REF="${{ github.ref }}"
          RELEASE_TAG="${{ github.ref_name }}"
          echo "Ref: ${RELEASE_REF}"
          echo "Tag: ${RELEASE_TAG}"

          if [[ ${RELEASE_TAG} =~ ^v([1-4])\.([0-9]+)\.([0-9]+)$ ]]; then
            PROJECT_NUM=${BASH_REMATCH[1]}
            REVIEWS_NUM=${BASH_REMATCH[2]}
            VERSION_NUM=${BASH_REMATCH[3]}

            PROJECT_VER=${PROJECT_NUM}

            if [[ ${PROJECT_NUM} -eq 3 ]]; then
              if [[ ${REVIEWS_NUM} -eq 0 ]]; then
                PROJECT_VER="3a"
              else
                PROJECT_VER="3b"
              fi
            fi

            echo "::set-output name=release_tag::${RELEASE_TAG}"
            echo "::set-output name=project_ver::${PROJECT_VER}"
            echo "::set-output name=project_num::${PROJECT_NUM}"
            echo "::set-output name=reviews_num::${REVIEWS_NUM}"
            echo "::set-output name=version_num::${VERSION_NUM}"

            echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
            echo "PROJECT_VER=${PROJECT_VER}" >> $GITHUB_ENV
            echo "PROJECT_NUM=${PROJECT_NUM}" >> $GITHUB_ENV
            echo "REVIEWS_NUM=${REVIEWS_NUM}" >> $GITHUB_ENV
            echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_ENV

            echo "Project: ${PROJECT_VER}"
            echo "Reviews: ${REVIEWS_NUM}"
            echo "Version: ${VERSION_NUM}"
          else
            echo "::error ::Unable to parse project information from tag. Check the tag uses the v#.#.# format in lowercase and each # is an integer value."
            exit 1
          fi

      - name: "Verify project number"
        id: verify_project_num
        uses: actions/github-script@v6
        env:
          RELEASE_TAG: ${{ steps.parse_release.outputs.release_tag }}
          PROJECT_NUM: ${{ steps.parse_release.outputs.project_num }}
        with:
          script: |
            const release_tag = process.env.RELEASE_TAG
            const project_num = parseInt(process.env.PROJECT_NUM);
            console.log(`Project: ${project_num}`);

            if (project_num > 1) {
              core.setFailed(`The release version ${release_tag} is for project ${project_num}. However, you are not yet eligible to start on project ${project_num} functionality.`);
            }

# TODO Verify project number
# For projects 2, 3, and 4, make sure there has been at least one code review of the previous project.
# This will be done by checking if there is an approved pull request.

      - name: "Verify review number"
        id: verify_review_num
        uses: actions/github-script@v6
        env:
          RELEASE_TAG: ${{ steps.parse_release.outputs.release_tag }}
          PROJECT_NUM: ${{ steps.parse_release.outputs.project_num }}
          REVIEWS_NUM: ${{ steps.parse_release.outputs.reviews_num }}
        with:
          script: |
            const release_tag = process.env.RELEASE_TAG
            const project_num = parseInt(process.env.PROJECT_NUM);
            const reviews_num = parseInt(process.env.REVIEWS_NUM);
            console.log(`Reviews: ${reviews_num}`);

            if (reviews_num > 0) {
              core.setFailed(`The release version ${release_tag} is for projects with ${reviews_num} code reviews. However, you have not yet had that many code reviews for project ${project_num}. Increment the minor version (the last number) in between code review appointments.`);
            }

# TODO Verify review number
# Check that the number of approved pull requests matches the number of code reviews.

      - name: "Generate cache keys"
        id: generate_keys
        run: |
          USER_SHA=${{ github.sha }}
          echo "User SHA: ${USER_SHA}"
          echo "::set-output name=user_cache::${USER_PATH}-${USER_SHA}"

          TEST_SHA=$(git ls-remote --refs https://github.com/${{ github.repository_owner }}/${TEST_PATH}.git main | head -1 | cut -f 1)
          echo "Test SHA: ${TEST_SHA}"
          echo "::set-output name=test_cache::${TEST_PATH}-${TEST_SHA}"

  check_compile:
    name: "Code Compiles"
    runs-on: ubuntu-latest
    needs: check_release
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}

      - name: "Compile source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -DcompileOptionXlint=-Xlint:none -DcompileOptionXdoclint=-Xdoclint:none -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false compile || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::Unable to compile your project source code."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

      - name: "Compile test code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp "-DcompileOptionXlint=-Xlint:none" "-DcompileOptionXdoclint=-Xdoclint:none" -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false test-compile || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::Unable to compile the project test code."
            exit 1
          fi

      - name: "Listing test code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/test-classes

  check_tests:
    name: "JUnit Tests"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}

      - name: "Recompile code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -DcompileOptionXlint=-Xlint:none -DcompileOptionXdoclint=-Xdoclint:none -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false clean compile test-compile

      - name: "Run current project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -Dgroups="test${{ needs.check_release.outputs.project_ver }}" test || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::One or more tests for this project did not pass."
            exit 1
          fi

      - name: "Run previous project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -Dgroups="past${{ needs.check_release.outputs.project_ver }}" test || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::One or more tests for the past project did not pass. Your code must still support the functionality of past projects."
            exit 1
          fi

      - name: "Run next project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -Dgroups="next${{ needs.check_release.outputs.project_ver }}" test || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::One or more tests for the next project did not pass. Your code should not yet support the functionality of the next project."
            exit 1
          fi

  check_source_warnings:
    name: "Code Warnings"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}

      - name: "Compile source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -DcompileOptionXlint=-Xlint:all,-processing -DcompileOptionXdoclint=-Xdoclint:none -Dmaven.compiler.showWarnings=true -DcompileOptionFail=true clean compile || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::Unable to compile the project source code without warnings."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

  check_javadoc_warnings:
    name: "Javadoc Warnings"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}

      - name: "Compile Javadoc comments"
        working-directory: ${{ env.USER_PATH }}
        run: |
          RUN_STATUS=0
          mvn -ntp -DcompileOptionXlint=-Xlint:none -DcompileOptionXdoclint=-Xdoclint:all/private -Dmaven.compiler.showWarnings=true -DcompileOptionFail=true clean compile || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 0 ]]; then
            echo "::error ::Unable to compile the project source code without Javadoc warnings."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

  check_code_style:
    name: "Code Style"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}

      - name: "Check extra main methods"
        working-directory: ${{ env.USER_PATH }}/src/main/java
        run: |
          RUN_STATUS=0
          grep -rnoE --exclude=Driver.java '\s*public\s+static\s+void\s+main\s*\(' || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 1 ]]; then
            echo "::error ::Except for Driver.java, you should delete old main methods from your code."
            exit 1
          fi

          echo "Found 0 main methods."

      - name: "Check extra TODO comments"
        if: ${{ always() }}
        working-directory: ${{ env.USER_PATH }}/src/main/java
        run: |
          RUN_STATUS=0
          grep -rnoE '(//|\*)?\s*TODO.*$' || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 1 ]]; then
            echo "::error ::You should delete old TODO comments from your code."
            exit 1
          fi

          echo "Found 0 TODO comments."

      - name: "Check for stack traces"
        if: ${{ always() }}
        working-directory: ${{ env.USER_PATH }}/src/main/java
        run: |
          RUN_STATUS=0
          grep -rnoE '\w\.printStackTrace\([^)]*\)\s*;' || RUN_STATUS=$?

          if [[ RUN_STATUS -ne 1 ]]; then
            echo "::error ::Your code should not print exception stack traces."
            exit 1
          fi

          echo "Found 0 stack traces."

  update_release:
    name: "Status"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile, check_tests, check_source_warnings, check_javadoc_warnings, check_code_style]
    if: ${{ always() }}
    steps:
      - uses: actions/github-script@v6
        env:
          TESTS_OKAY: ${{ needs.check_tests.result == 'success' }}
          CHECK_OKAY: ${{ needs.check_source_warnings.result == 'success' && needs.check_javadoc_warnings.result == 'success' && needs.check_code_style.result == 'success' }}
          PROJECT_VER: ${{ needs.check_release.outputs.project_ver }}
        with:
          script: |
            let message = `:no_entry: The release \`${ context.payload.release.tag_name }\` did **NOT** pass all project 1 tests. This release may not be used to request a grade or code review.`;

            if (process.env.TESTS_OKAY === 'true') {
              if (process.env.CHECK_OKAY === 'true') {
                message = `:100: The release \`${ context.payload.release.tag_name }\` passed all project ${ process.env.PROJECT_VER } tests and checks. This release may be used to request a project test grade or request code review.`;
              }
              else {
                message = `:bell: The release \`${ context.payload.release.tag_name }\` passed all project ${ process.env.PROJECT_VER } tests, but did not pass one or more of the other checks required for code review. This release may be used to request a project test grade only.`;
              }
            }

            let body = `
            ## Eligibility

              - [${process.env.TESTS_OKAY == 'true' ? 'x' : ' '}] Project Test
              - [${process.env.TESTS_OKAY == 'true' && process.env.CHECK_OKAY == 'true' ? 'x' : ' '}] Project Review

            ## Status

            ${ message } ${ process.env.RUN_DETAIL }
            `;

            github.rest.repos.updateRelease({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              release_id: context.payload.release.id,
              body: body
            });

            core.notice(message);
