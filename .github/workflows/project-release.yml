name: "Check project release"

on:
  workflow_call:
    outputs:
      project_num:
        description: "The project number (e.g. 1, 2, 3a, 3b, or 4)."
        value: ${{ jobs.check_release.outputs.project_num }}

      reviews_num:
        description: "The number of code reviews (e.g. 2 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.reviews_num }}

      version_num:
        description: "The minor version number (e.g. 3 for tag v1.2.3)."
        value: ${{ jobs.check_release.outputs.reviews_num }}

      release_tag:
        description: "The project version (e.g. v1.0.0)."
        value: ${{ jobs.check_release.outputs.release_tag }}

env:
  USER_PATH: project-main
  TEST_PATH: project-tests
  END_RESULT: ':warning: The checks for release `${{ needs.check_release.outputs.release_tag }}` did not complete properly.'
  RUN_DETAIL: "See [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."

jobs:
  check_release:
    name: "Release Number"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.parse_release.outputs.release_tag }}
      project_num: ${{ steps.parse_release.outputs.project_num }}
      reviews_num: ${{ steps.parse_release.outputs.reviews_num }}
      version_num: ${{ steps.parse_release.outputs.version_num }}
      user_cache: ${{ steps.generate_keys.outputs.user_cache }}
      test_cache: ${{ steps.generate_keys.outputs.test_cache }}
      
    steps:
      - name: "Check workflow trigger"
        id: check_trigger
        run: |
          echo "Event: ${{ github.event_name }}"
          echo " Type: ${{ github.ref_type }}"

          if [[ "${{ github.event_name }}" != "release" || "${{ github.ref_type }}" != "tag" ]]; then
            echo "::error ::Unexpected workflow trigger. This workflow only works on release tags."
            exit 1
          fi
          
      - name: "Parse release version"
        id: parse_release
        run: |
          RELEASE_REF="${{ github.ref }}"
          RELEASE_TAG="${{ github.ref_name }}"
          echo "Ref: ${RELEASE_REF}"
          echo "Tag: ${RELEASE_TAG}"
          
          if [[ ${RELEASE_TAG} =~ ^v([1-4])\.([0-9]+)\.([0-9]+)$ ]]; then
            PROJECT_NUM=${BASH_REMATCH[1]}
            REVIEWS_NUM=${BASH_REMATCH[2]}
            VERSION_NUM=${BASH_REMATCH[3]}
            
            if [[ ${PROJECT_NUM} -eq 3 ]]; then
              if [[ ${REVIEWS_NUM} -eq 0 ]]; then
                PROJECT_NUM="3a"
              else
                PROJECT_NUM="3b"
              fi
            fi
            
            echo "::set-output name=release_tag::${RELEASE_TAG}"
            echo "::set-output name=project_num::${PROJECT_NUM}"
            echo "::set-output name=reviews_num::${REVIEWS_NUM}"
            echo "::set-output name=version_num::${VERSION_NUM}"
            
            echo "Project: ${PROJECT_NUM}"
            echo "Reviews: ${REVIEWS_NUM}"
            echo "Version: ${VERSION_NUM}"
          else
            echo "::error ::Unable to parse project information from tag. Check the tag uses the v#.#.# format in lowercase."
            exit 1
          fi
          
      - name: "Generate cache keys"
        id: generate_keys
        run: |
          USER_SHA=${{ github.sha }}
          echo "User SHA: ${USER_SHA}"
          echo "::set-output name=user_cache::${USER_PATH}-${USER_SHA}"
          
          TEST_SHA=$(git ls-remote --refs https://github.com/${{ github.repository_owner }}/${TEST_PATH}.git main | head -1 | cut -f 1)
          echo "Test SHA: ${TEST_SHA}"
          echo "::set-output name=test_cache::${TEST_PATH}-${TEST_SHA}"

  check_compile:
    name: "Code Compiles"
    runs-on: ubuntu-latest
    needs: check_release
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}
    
      - name: "Compile source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -DcompileOptionXlint=-Xlint:none -DcompileOptionXdoclint=-Xdoclint:none -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false compile
          
          if [[ $? -ne 0 ]]; then
            echo "::error ::Unable to compile your project source code."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

      - name: "Compile test code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp "-DcompileOptionXlint=-Xlint:none" "-DcompileOptionXdoclint=-Xdoclint:none" -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false test-compile

          if [[ $? -ne 0 ]]; then
            echo "::error ::Unable to compile the project test code."
            exit 1
          fi
          
      - name: "Listing test code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/test-classes

  check_tests:
    name: "JUnit Tests"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}
    
      - name: "Recompile code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -DcompileOptionXlint=-Xlint:none -DcompileOptionXdoclint=-Xdoclint:none -Dmaven.compiler.showWarnings=false -DcompileOptionFail=false clean compile test-compile
      
      - name: "Run current project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -Dgroups="test${{ needs.check_release.outputs.project_num }}" test

          if [[ $? -ne 0 ]]; then
            echo "::error ::One or more tests for this project did not pass."
            exit 1
          fi

      - name: "Run previous project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -Dgroups="past${{ needs.check_release.outputs.project_num }}" test

          if [[ $? -ne 0 ]]; then
            echo "::error ::One or more tests for the past project did not pass."
            exit 1
          fi

      - name: "Run next project tests"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp -Dgroups="next${{ needs.check_release.outputs.project_num }}" test
          
          if [[ $? -eq 0 ]]; then
            echo "::error ::The tests for the next project should not yet pass! You must work on the next project in a separate branch from your current project."
            exit 1
          else
            echo "These tests are expected to fail!"
            exit 0
          fi

  check_source_warnings:
    name: "Code Warnings"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}
    
      - name: "Compile source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp "-DcompileOptionXlint=-Xlint:all,-processing" "-DcompileOptionXdoclint=-Xdoclint:none" -Dmaven.compiler.showWarnings=true -DcompileOptionFail=true clean compile

          if [[ $? -ne 0 ]]; then
            echo "::error ::Unable to compile the project source code without warnings."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

  check_javadoc_warnings:
    name: "Javadoc Warnings"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}
    
      - name: "Compile source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          mvn -ntp "-DcompileOptionXlint=-Xlint:none" "-DcompileOptionXdoclint=-Xdoclint:all/private" -Dmaven.compiler.showWarnings=true -DcompileOptionFail=true clean compile

          if [[ $? -ne 0 ]]; then
            echo "::error ::Unable to compile the project source code without Javadoc warnings."
            exit 1
          fi

      - name: "Listing source code"
        working-directory: ${{ env.USER_PATH }}
        run: |
          ls -ACGR target/classes

  check_code_style:
    name: "Code Style"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile]
    steps:
      - name: "Setup project repository"
        id: "setup-project"
        uses: usf-cs272-spring2022/action-project-setup@main
        with:
          user_repo: ${{ github.repository }}
          test_repo: ${{ github.repository_owner }}/${{ env.TEST_PATH }}
          user_cache: ${{ needs.check_release.outputs.user_cache }}
          test_cache: ${{ needs.check_release.outputs.test_cache }}
          
      - name: "Check extra main methods"
        working-directory: ${{ env.USER_PATH }}/src/main/java
        run: |
          grep -rnoiE --exclude=Driver.java '\s*public\s+static\s+void\s+main\s*\('
          
          if [[ $? -ne 1 ]]; then
            echo "::error ::Except for Driver.java, you should delete old main methods from your code."
            exit 1
          fi

  update_success:
    name: "Update Success"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile, check_tests, check_source_warnings, check_javadoc_warnings, check_code_style]
    if: ${{ success() }}
    steps:
      - name: "Update status"
        run: |
          MESSAGE=':white_check_mark: The release `${{ needs.check_release.outputs.release_tag }}` passed all project ${{ needs.check_release.outputs.project_num }} checks.'
          echo "END_RESULT=${MESSAGE}" >> $GITHUB_ENV
          
  update_failure:
    name: "Update Failure"
    runs-on: ubuntu-latest
    needs: [check_release, check_compile, check_tests, check_source_warnings, check_javadoc_warnings, check_code_style]
    if: ${{ failure() || cancelled() }}
    steps:
      - name: "Update test success"
        if: ${{ needs.check_tests.result == 'success' }}
        run: |
          MESSAGE=':octocat: The release `${{ needs.check_release.outputs.release_tag }}` passed all project ${{ needs.check_release.outputs.project_num }} tests, but did not pass one or more of the other checks required for code review.'
          echo "END_RESULT=${MESSAGE}" >> $GITHUB_ENV

      - name: "Update test failure"
        if: ${{ needs.check_tests.result != 'success' }}
        run: |
          MESSAGE=':x: The release `${{ needs.check_release.outputs.release_tag }}` did **NOT** pass all project ${{ needs.check_release.outputs.project_num }} tests.'
          echo "END_RESULT=${MESSAGE}" >> $GITHUB_ENV
  
  update_release:
    name: "Update Release"
    runs-on: ubuntu-latest
    needs: [update_success, update_failure]
    if: ${{ always() }}
    steps:
      - name: "Update release body"
        run: |
          curl \
            -X PATCH \
            --header "Accept: application/vnd.github.v3+json" \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --url https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }} \
            --data '{"body": "${{ env.END_RESULT }} ${{ env.RUN_DETAIL }}"}'

# output action result
# fix up updating release
# fix up error annotations (so many)
# https://docs.github.com/en/rest/reference/releases#update-a-release