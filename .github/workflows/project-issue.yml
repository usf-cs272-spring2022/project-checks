name: "Check project issue"

on:
  workflow_call:

env:
  # project tests and first code review deadlines
  PROJECT_1_TESTS:  "2022-03-01"
  PROJECT_1_REVIEW: "2022-03-08"
  PROJECT_2_TESTS:  "2022-03-29"
  PROJECT_2_REVIEW: "2022-04-05"
  PROJECT_3_TESTS:  "2022-04-19"
  PROJECT_3_REVIEW: "2022-04-26"
  PROJECT_4_TESTS:  "2022-05-10"

  LATE_TESTS_POINTS:  "2" # number of points per deduction (tests)
  LATE_TESTS_DAYS:    "1" # number of days late per deduction (tests)

  LATE_REVIEW_POINTS: "5" # number of points per deduction (first code review)
  LATE_REVIEW_DAYS:   "3" # number of days late per deduction (first code review)

  LATE_MAX_GAP:      "10" # maximum gap in between code reviews
  LATE_MAX_POINTS:   "26" # maximum number of points to deduct

jobs:
  check_issue:
    name: "Issue"
    runs-on: ubuntu-latest

    outputs:
      actions: ${{ steps.check_labels.outputs.actions }}
      reviews: ${{ steps.check_labels.outputs.reviews }}
      branch:  ${{ steps.check_labels.outputs.branch }}
      grade:   ${{ steps.check_labels.outputs.grade }}
      label:   ${{ steps.check_labels.outputs.label }}

      name: ${{ steps.check_body.outputs.name }}
      user: ${{ steps.check_body.outputs.user }}

      release: ${{ steps.check_title.outputs.title }}

    steps:
      - name: "Check issue labels"
        id: check_labels
        uses: actions/github-script@v6
        with:
          script: |
            let actions = 'false';
            let reviews = 'false';
            let branch  = 'false';
            let grade   = 'false';
            let label   = 'error';

            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number
            });

            if (labels.status != 200) {
              core.setFailed(`Unable to fetch labels for issue #${context.issue.number}. Check for any outages and try to re-run this action.`);
            }
            else if (labels.data.length == 0) {
              core.setFailed(`Issue #${context.issue.number} has no labels. Please use the provided issue templates to create issues.`);
            }
            else if (labels.data.length > 1) {
              core.setFailed(`Issue #${context.issue.number} has too many labels. Please remove any "fixme" or "error" labels before re-running this workflow. Found: ${labels.data.map(e => e.name).join(", ")}`);
            }
            else { // have exactly 1 label
              label = labels.data[0].name;

              switch (label) {
                case 'review-request':
                  actions = 'checks';
                  reviews = 'approved';
                  branch  = 'branch';
                  break;

                case 'grade-tests':
                  actions = 'tests';
                  grade   = 'grade';
                  break;

                case 'grade-review':
                  reviews = 'approved';
                  grade   = 'grade';
                  break;

                case 'grade-release':
                  actions = 'checks';
                  reviews = 'passed';
                  grade   = 'grade';
                  break;

                default:
                  core.setFailed(`Issue ${context.issue.number} has an unexpected label: ${label}`);
              }
            }

            core.setOutput('actions', actions);
            core.setOutput('reviews', reviews);
            core.setOutput('branch', branch);
            core.setOutput('grade', grade);
            core.setOutput('label', label);

      - name: "Check issue body"
        id: check_body
        run: |
          echo "Hello world"
          echo "::set-output name=name::Pending"
          echo "::set-output name=user::Pending"

      - name: "Check issue title"
        id: check_title
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.issue.title;
            console.log(title);

  check_actions:
    name: "Actions"
    runs-on: ubuntu-latest
    needs: [check_issue]
    if: ${{ needs.check_issue.outputs.actions == 'checks' || needs.check_issue.outputs.actions == 'tests' }}
    steps:
      - name: "Hello world"
        run: echo "Hello world"


  check_reviews:
    name: "Reviews"
    runs-on: ubuntu-latest
    if: ${{ needs.check_issue.outputs.reviews == 'approved' || needs.check_issue.outputs.reviews == 'passed' }}
    needs: [check_issue]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_grade:
    name: "Grade"
    runs-on: ubuntu-latest
    if: ${{ !failure() && needs.check_issue.outputs.grade == 'grade' }}
    needs: [check_issue, check_actions, check_reviews]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_branch:
    name: "Branch"
    if: ${{ !failure() && needs.check_issue.outputs.branch == 'branch' }}
    needs: [check_issue, check_actions, check_reviews]
    runs-on: ubuntu-latest
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_status:
    name: "Status"
    if: ${{ always() }}
    needs: [check_issue, check_actions, check_reviews, make_grade, make_branch]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            let run_details = 'See [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';

            let message = `:octocat: Hi @${{ github.actor }}! This action is not yet working. Please reach out on Piazza instead.`;

            let success = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            };

            let assignees = ['sjengle', 'igentle292', 'mtquach2', 'par5ul1', 'tydaljames', 'ybsolomon'];
            let labels = [];

            // add existing label if exists
            if ('${{ needs.check_issue.outputs.label }}') {
              labels.push('${{ needs.check_issue.outputs.label }}');
            }

            if ('${{ needs.check_issue.result }}' != 'success') {
              message = `:no_entry: @${{ github.actor }} there was a problem with your issue and we are unable to process your request. ${run_details} After fixing the problem, you can re-trigger this action by closing and re-opening this issue.`;

              // update issue
              details.state = 'closed';
              details.assignees = ['${{ github.actor }}'];
              details.labels = labels;
              details.labels.push('error');
            }

            // check for failure cases
            switch('${{ needs.check_branch.result }}') {
              case 'success':

                break;

              case 'failure':

            }



            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

            github.rest.issues.update(details);
