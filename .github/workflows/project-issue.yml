name: "Check project issue"

on:
  workflow_call:

env:
  # project tests and first code review deadlines
  PROJECT_1_TESTS:  "2022-03-01"
  PROJECT_1_REVIEW: "2022-03-08"
  PROJECT_2_TESTS:  "2022-03-29"
  PROJECT_2_REVIEW: "2022-04-05"
  PROJECT_3_TESTS:  "2022-04-19"
  PROJECT_3_REVIEW: "2022-04-26"
  PROJECT_4_TESTS:  "2022-05-10"

  LATE_TESTS_POINTS:  "2" # number of points per deduction (tests)
  LATE_TESTS_DAYS:    "1" # number of days late per deduction (tests)

  LATE_REVIEW_POINTS: "5" # number of points per deduction (first code review)
  LATE_REVIEW_DAYS:   "3" # number of days late per deduction (first code review)

  LATE_MAX_GAP:      "10" # maximum gap in between code reviews
  LATE_MAX_POINTS:   "26" # maximum number of points to deduct

  # default messages
  RUN_DETAIL: "See [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
  FIX_ERRORS: "After fixing the errors, please remove the `error` label and re-open this issue."

jobs:
  check_issue:
    name: "Issue"
    runs-on: ubuntu-latest

    outputs:
      actions: ${{ steps.check_labels.outputs.actions }}
      reviews: ${{ steps.check_labels.outputs.reviews }}
      branch:  ${{ steps.check_labels.outputs.branch }}
      grade:   ${{ steps.check_labels.outputs.grade }}
      label:   ${{ steps.check_labels.outputs.label }}

      name: ${{ steps.check_body.outputs.name }}
      user: ${{ steps.check_body.outputs.user }}

      release: ${{ steps.check_title.outputs.title }}

    steps:
      - name: "Output context"
        uses: actions/github-script@v6
        with:
          script: console.log(context);

      - name: "Check issue labels"
        id: check_labels
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.issue.labels.map(e => e.name);
            console.log(`Labels: ${labels}`);

            if (labels.length == 1) {
              const label = labels.data[0].name;

              switch (label) {
                case 'review-request':
                case 'grade-tests':
                case 'grade-review':
                case 'grade-release':
                  core.setOutput('label', label);
                  return;
              }
            }

            // only errors will get this far
            const text_message = `Unable to determine request type from issue #${ context.payload.issue.number } labels: ${labels.length === 0 ? '(none)' : labels.join(', ')}`;

            const long_message = `:no_entry: Unable to determine request type from issue #${ context.payload.issue.number } labels: ${labels.length === 0 ? '(none)' : labels.join(', ')}\n\nMake sure to use the provided issue templates. ${ process.env.FIX_ERRORS }\n\n:octocat: ${ process.env.RUN_DETAIL }`;

            labels.push('error');

            github.rest.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body: long_message});

            github.rest.issues.update({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, state: 'closed', assignees: context.actor, labels: labels});

            core.setFailed(text_message);

      - name: "Check issue body"
        id: check_body
        run: |
          echo "Hello world"
          echo "::set-output name=name::Pending"
          echo "::set-output name=user::Pending"

      - name: "Check issue title"
        id: check_title
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.issue.title;
            console.log(`Issue Title: ${title}`);

            const pattern = /^Request.+\b(v[1-4]\.\d+\.\d+)$/;
            const matched = title.match(pattern);

            if (matched !== null && matched.length === 2) {
              const release = matched[1];
              core.setOutput('release', release);
              console.log(`Release: ${release}`);
            }
            else {
              const text_message = `Unable to parse release from issue #${ context.payload.issue.number } title: ${title}`;
              const long_message = `:no_entry: Unable to parse release from issue #${ context.payload.issue.number } title:\n\n> ${title}\n\nMake sure to replace \`v0.0.0\` in the issue title with a properly-formated release number. ${ process.env.FIX_ERRORS }\n\n:octocat: ${ process.env.RUN_DETAIL }`;

              let labels = context.payload.issue.labels.map(e => e.name);
              labels.push('error');

              github.rest.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body: long_message});

              github.rest.issues.update({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, state: 'closed', assignees: context.actor, labels: labels});

              core.setFailed(text_message);
            }

  check_actions:
    name: "Actions"
    runs-on: ubuntu-latest
    needs: [check_issue]
    if: ${{ needs.check_issue.outputs.actions == 'checks' || needs.check_issue.outputs.actions == 'tests' }}
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_reviews:
    name: "Reviews"
    runs-on: ubuntu-latest
    if: ${{ needs.check_issue.outputs.reviews == 'approved' || needs.check_issue.outputs.reviews == 'passed' }}
    needs: [check_issue]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_grade:
    name: "Grade"
    runs-on: ubuntu-latest
    if: ${{ !failure() && needs.check_issue.outputs.grade == 'grade' }}
    needs: [check_issue, check_actions, check_reviews]
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  make_branch:
    name: "Branch"
    if: ${{ !failure() && needs.check_issue.outputs.branch == 'branch' }}
    needs: [check_issue, check_actions, check_reviews]
    runs-on: ubuntu-latest
    steps:
      - name: "Hello world"
        run: echo "Hello world"

  check_status:
    name: "Status"
    if: ${{ always() }}
    needs: [check_issue, check_actions, check_reviews, make_grade, make_branch]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            let run_details = 'See [run id ${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';

            let message = `:octocat: Hi @${{ github.actor }}! This action is not yet working. Please reach out on Piazza instead.`;

            let success = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            };

            let assignees = ['sjengle', 'igentle292', 'mtquach2', 'par5ul1', 'tydaljames', 'ybsolomon'];
            let labels = [];

            // add existing label if exists
            if ('${{ needs.check_issue.outputs.label }}') {
              labels.push('${{ needs.check_issue.outputs.label }}');
            }

            if ('${{ needs.check_issue.result }}' != 'success') {
              message = `:no_entry: @${{ github.actor }} there was a problem with your issue and we are unable to process your request. ${run_details} After fixing the problem, you can re-trigger this action by closing and re-opening this issue.`;

              // update issue
              details.state = 'closed';
              details.assignees = ['${{ github.actor }}'];
              details.labels = labels;
              details.labels.push('error');
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

            github.rest.issues.update(details);
